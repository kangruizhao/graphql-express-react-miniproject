/**
 * Copyright (c) 2016-present, Nicolas Gallagher.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import createRuleBlock from './createRuleBlock';
import styleResolver from './styleResolver';
import { systemFontStack } from './constants';
var fontFamilyProperties = ['font', 'fontFamily'];
/**
 * A simple (and dangerous) CSS system.
 * The order of CSS rule insertion is not guaranteed.
 * Avoiding combining 2 or more classes that modify the same property.
 */

var css = {
  /**
   * const classes = css.create({ base: {}, extra: {} })
   */
  create: function create(rules) {
    var result = {};
    Object.keys(rules).forEach(function (key) {
      var rule = rules[key];
      fontFamilyProperties.forEach(function (prop) {
        var value = rule[prop];

        if (value && value.indexOf('System') > -1) {
          rule[prop] = value.replace('System', systemFontStack);
        }
      });
      var cssRule = createRuleBlock(rule);
      var className = styleResolver.styleSheetManager.injectRule(key, cssRule);
      result[key] = className;
    });
    return result;
  },

  /**
   * css.combine(classes.base, classes.extra)
   */
  combine: function combine() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.reduce(function (className, value) {
      if (value) {
        className += className.length > 0 ? ' ' + value : value;
      }

      return className;
    }, '');
  }
};
export default css;